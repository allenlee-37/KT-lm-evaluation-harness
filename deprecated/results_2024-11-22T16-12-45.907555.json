{
  "results": {
    "leaderboard_gpqa": {
      " ": " ",
      "alias": "leaderboard_gpqa"
    },
    "leaderboard_gpqa_diamond": {
      "alias": " - leaderboard_gpqa_diamond",
      "exact_match,get-answer": 0.4,
      "exact_match_stderr,get-answer": 0.16329931618554522
    },
    "leaderboard_gpqa_extended": {
      "alias": " - leaderboard_gpqa_extended",
      "exact_match,get-answer": 0.4,
      "exact_match_stderr,get-answer": 0.16329931618554522
    },
    "leaderboard_gpqa_main": {
      "alias": " - leaderboard_gpqa_main",
      "exact_match,get-answer": 0.4,
      "exact_match_stderr,get-answer": 0.16329931618554522
    }
  },
  "group_subtasks": {
    "leaderboard_gpqa": [
      "leaderboard_gpqa_diamond",
      "leaderboard_gpqa_extended",
      "leaderboard_gpqa_main"
    ]
  },
  "configs": {
    "leaderboard_gpqa_diamond": {
      "task": "leaderboard_gpqa_diamond",
      "dataset_path": "Idavidrein/gpqa",
      "dataset_name": "gpqa_diamond",
      "training_split": "train",
      "validation_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        choices = [\n            preprocess(doc[\"Incorrect Answer 1\"]),\n            preprocess(doc[\"Incorrect Answer 2\"]),\n            preprocess(doc[\"Incorrect Answer 3\"]),\n            preprocess(doc[\"Correct Answer\"]),\n        ]\n\n        random.shuffle(choices) # 랜덤 셔플한 초이스\n        correct_answer_index = choices.index(preprocess(doc[\"Correct Answer\"])) # 정답 인덱스\n\n        out_doc = {\n            \"choice1\": choices[0],\n            \"choice2\": choices[1],\n            \"choice3\": choices[2],\n            \"choice4\": choices[3],\n            \"answer\": f\"({chr(65 + correct_answer_index)})\",\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "What is the correct answer to this question? Please do not add any explanation, just give me the correct answer between options (A), (B), (C), or (D). Question:{{Question}}\nChoices:\n(A) {{choice1}}\n(B) {{choice2}}\n(C) {{choice3}}\n(D) {{choice4}}\n the answer is: ",
      "doc_to_target": "answer",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "\\([A-D]\\)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_gpqa_extended": {
      "task": "leaderboard_gpqa_extended",
      "dataset_path": "Idavidrein/gpqa",
      "dataset_name": "gpqa_extended",
      "training_split": "train",
      "validation_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        choices = [\n            preprocess(doc[\"Incorrect Answer 1\"]),\n            preprocess(doc[\"Incorrect Answer 2\"]),\n            preprocess(doc[\"Incorrect Answer 3\"]),\n            preprocess(doc[\"Correct Answer\"]),\n        ]\n\n        random.shuffle(choices) # 랜덤 셔플한 초이스\n        correct_answer_index = choices.index(preprocess(doc[\"Correct Answer\"])) # 정답 인덱스\n\n        out_doc = {\n            \"choice1\": choices[0],\n            \"choice2\": choices[1],\n            \"choice3\": choices[2],\n            \"choice4\": choices[3],\n            \"answer\": f\"({chr(65 + correct_answer_index)})\",\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "What is the correct answer to this question? Please do not add any explanation, just give me the correct answer between options (A), (B), (C), or (D). Question:{{Question}}\nChoices:\n(A) {{choice1}}\n(B) {{choice2}}\n(C) {{choice3}}\n(D) {{choice4}}\n the answer is: ",
      "doc_to_target": "answer",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "\\([A-D]\\)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_gpqa_main": {
      "task": "leaderboard_gpqa_main",
      "dataset_path": "Idavidrein/gpqa",
      "dataset_name": "gpqa_main",
      "training_split": "train",
      "validation_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        choices = [\n            preprocess(doc[\"Incorrect Answer 1\"]),\n            preprocess(doc[\"Incorrect Answer 2\"]),\n            preprocess(doc[\"Incorrect Answer 3\"]),\n            preprocess(doc[\"Correct Answer\"]),\n        ]\n\n        random.shuffle(choices) # 랜덤 셔플한 초이스\n        correct_answer_index = choices.index(preprocess(doc[\"Correct Answer\"])) # 정답 인덱스\n\n        out_doc = {\n            \"choice1\": choices[0],\n            \"choice2\": choices[1],\n            \"choice3\": choices[2],\n            \"choice4\": choices[3],\n            \"answer\": f\"({chr(65 + correct_answer_index)})\",\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "What is the correct answer to this question? Please do not add any explanation, just give me the correct answer between options (A), (B), (C), or (D). Question:{{Question}}\nChoices:\n(A) {{choice1}}\n(B) {{choice2}}\n(C) {{choice3}}\n(D) {{choice4}}\n the answer is: ",
      "doc_to_target": "answer",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n"
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "\\([A-D]\\)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "leaderboard_gpqa_diamond": 1.0,
    "leaderboard_gpqa_extended": 1.0,
    "leaderboard_gpqa_main": 1.0
  },
  "n-shot": {
    "leaderboard_gpqa_diamond": 0,
    "leaderboard_gpqa_extended": 0,
    "leaderboard_gpqa_main": 0
  },
  "higher_is_better": {
    "leaderboard_gpqa": {
      "exact_match": true
    },
    "leaderboard_gpqa_diamond": {
      "exact_match": true
    },
    "leaderboard_gpqa_extended": {
      "exact_match": true
    },
    "leaderboard_gpqa_main": {
      "exact_match": true
    }
  },
  "n-samples": {
    "leaderboard_gpqa_diamond": {
      "original": 198,
      "effective": 10
    },
    "leaderboard_gpqa_extended": {
      "original": 546,
      "effective": 10
    },
    "leaderboard_gpqa_main": {
      "original": 448,
      "effective": 10
    }
  },
  "config": {
    "model": "openai-chat-completions",
    "model_args": "model=gpt-4o",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 10.0,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "4ee93a3d",
  "date": 1732259531.489064,
  "pretty_env_info": "PyTorch version: 2.4.1\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: macOS 15.1 (arm64)\nGCC version: Could not collect\nClang version: 16.0.0 (clang-1600.0.26.4)\nCMake version: Could not collect\nLibc version: N/A\n\nPython version: 3.12.5 (v3.12.5:ff3bc82f7c9, Aug  7 2024, 05:32:06) [Clang 13.0.0 (clang-1300.0.29.30)] (64-bit runtime)\nPython platform: macOS-15.1-arm64-arm-64bit\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nApple M1 Pro\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.0\n[pip3] torch==2.4.1\n[conda] numpy                     2.1.3                    pypi_0    pypi",
  "transformers_version": "4.44.2",
  "upper_git_hash": null,
  "task_hashes": {
    "leaderboard_gpqa_diamond": "86488c284942e184da32ef3802525e101317bde688b59273bef4505dea2bc9c0",
    "leaderboard_gpqa_extended": "682bea82d18cbaf2e7a7d4f9bbaae8af92eb36486af664f0969f4589028d2944",
    "leaderboard_gpqa_main": "a256fce764783f38d6a0df63039053a34f51384c90be65a2db007f08cfc7a3cc"
  },
  "model_source": "openai-chat-completions",
  "model_name": "gpt-4o",
  "model_name_sanitized": "gpt-4o",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 171946.010342583,
  "end_time": 171984.192606875,
  "total_evaluation_time_seconds": "38.18226429200149"
}