{
  "results": {
    "kobest_boolq": {
      "alias": "kobest_boolq",
      "exact_match,get-answer": 0.9565527065527065,
      "exact_match_stderr,get-answer": 0.005442607058113144
    },
    "kobest_copa": {
      "alias": "kobest_copa",
      "exact_match,get-answer": 0.98,
      "exact_match_stderr,get-answer": 0.0044294039801783276
    },
    "kobest_hellaswag": {
      "alias": "kobest_hellaswag",
      "exact_match,get-answer": 0.746,
      "exact_match_stderr,get-answer": 0.019486596801643385
    },
    "kobest_sentineg": {
      "alias": "kobest_sentineg",
      "exact_match,none": 0.982367758186398,
      "exact_match_stderr,none": 0.006613680698322635
    },
    "kobest_wic": {
      "alias": "kobest_wic",
      "exact_match,none": 0.35555555555555557,
      "exact_match_stderr,none": 0.013490672872121768
    }
  },
  "group_subtasks": {
    "kobest_hellaswag": [],
    "kobest_wic": [],
    "kobest_boolq": [],
    "kobest_sentineg": [],
    "kobest_copa": []
  },
  "configs": {
    "kobest_boolq": {
      "task": "kobest_boolq",
      "tag": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "다음 질문은 '예' 혹은 '아니오'로 대답하시오. \n\n {{paragraph}} 질문: {{question}} 답변: ",
      "doc_to_target": "def boolq_label_to_text(doc: dict) -> str:\n    correct_choice = \"예\" if doc['label'] == 1 else \"아니오\"\n    return f\"\"\"{correct_choice}\"\"\"\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "(예|아니오)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_copa": {
      "task": "kobest_copa",
      "tag": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "copa",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def copa_doc_to_text(doc: dict) -> str:\n    connector = {\"원인\": \" 왜냐하면\", \"결과\": \" 그래서\"}[doc[\"question\"].strip()]\n    system = \"다음 전제와 이어지는 보기가 있습니다. 둘 중 더 알맞은 보기를 선택해주세요. 부가 설명 없이 1과 2 중에 선택해주세요.\"\n    text = f\"\"\"전제: {doc['premise']} {connector}:\\n1.{doc['alternative_1']}\\n2.{doc['alternative_2']}\"\"\"\n    return f\"\"\"{system} {text}\"\"\"\n",
      "doc_to_target": "def copa_doc_to_target(doc: dict) -> str:\n    correct_choice = 1 if doc[\"label\"] == 0 else 2\n    return f\"\"\"{correct_choice}\"\"\"\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "(1|2)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_hellaswag": {
      "task": "kobest_hellaswag",
      "tag": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "hellaswag",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def hellaswag_process_doc(doc: Dataset) -> Dataset:\n    def preprocessor(dataset):\n        ### 시스템 프롬프트 추가\n        system = \"\"\"문장에 이어지는 보기 1,2,3,4 중에 가장 적절한 보기를 선택해주세요.\"\"\"\n        return {\n            \"query\": f\"\"\"{system}\\n문장: {dataset[\"context\"]}\"\"\",\n            \"choices\": [\n                dataset[\"ending_1\"],\n                dataset[\"ending_2\"],\n                dataset[\"ending_3\"],\n                dataset[\"ending_4\"],\n            ],\n            \"gold\": int(dataset[\"label\"]),\n        }\n\n    return doc.map(preprocessor)\n",
      "doc_to_text": "{{query}} 1. {{choices[0]}}, 2. {{choices[1]}}, 3. {{choices[2]}}, 4. {{choices[3]}}",
      "doc_to_target": "{{label+1}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "[1-4]"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_sentineg": {
      "task": "kobest_sentineg",
      "tag": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "sentineg",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def sentineg_doc_to_text(doc: dict):\n    system = \"\"\"다음 문장에 대한 긍부정을 판단해주세요. 긍정일 경우 \"1\", 부정일 경우 \"0\"을 선택해주세요.\"\"\"\n    querry = f\"\"\"문장: {doc[\"sentence\"]} 긍부정:\"\"\"\n    return f\"{system} {querry}\"\n",
      "doc_to_target": "{{label}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_wic": {
      "task": "kobest_wic",
      "tag": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "wic",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def wic_doc_to_text(doc: dict) -> str:\n    system = \"\"\"아래 문제를 보고 두 문장이 같은 뜻으로 쓰였는지 판단해주세요. 같은 뜻이라면 \"예\", 다른 뜻이라면 \"아니오\"를 선택해주세요.\"\"\"\n    querry = f\"\"\"문장1: {doc[\"context_1\"]}\\n문장2: {doc[\"context_2\"]}\\n두 문장에서 {doc[\"word\"]}가 같은 뜻으로 쓰였나?\"\"\"\n    return f\"{system} {querry}\"\n",
      "doc_to_target": "def wic_doc_to_target(doc: dict) -> str:\n    correct_choice = \"아니오\" if doc[\"label\"] == 0 else \"예\"\n    return f\"\"\"{correct_choice}\"\"\"\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "kobest_boolq": 1.0,
    "kobest_copa": 1.0,
    "kobest_hellaswag": 1.0,
    "kobest_sentineg": 1.0,
    "kobest_wic": 1.0
  },
  "n-shot": {
    "kobest_boolq": 0,
    "kobest_copa": 0,
    "kobest_hellaswag": 0,
    "kobest_sentineg": 0,
    "kobest_wic": 0
  },
  "higher_is_better": {
    "kobest_boolq": {
      "exact_match": true
    },
    "kobest_copa": {
      "exact_match": true
    },
    "kobest_hellaswag": {
      "exact_match": true
    },
    "kobest_sentineg": {
      "exact_match": true
    },
    "kobest_wic": {
      "exact_match": true
    }
  },
  "n-samples": {
    "kobest_copa": {
      "original": 1000,
      "effective": 1000
    },
    "kobest_sentineg": {
      "original": 397,
      "effective": 397
    },
    "kobest_boolq": {
      "original": 1404,
      "effective": 1404
    },
    "kobest_wic": {
      "original": 1260,
      "effective": 1260
    },
    "kobest_hellaswag": {
      "original": 500,
      "effective": 500
    }
  },
  "config": {
    "model": "openai-chat-completions",
    "model_args": "model=gpt-4o",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "12a266ca",
  "date": 1732780761.221963,
  "pretty_env_info": "PyTorch version: 2.4.1\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: macOS 15.1.1 (arm64)\nGCC version: Could not collect\nClang version: 16.0.0 (clang-1600.0.26.4)\nCMake version: Could not collect\nLibc version: N/A\n\nPython version: 3.12.5 (v3.12.5:ff3bc82f7c9, Aug  7 2024, 05:32:06) [Clang 13.0.0 (clang-1300.0.29.30)] (64-bit runtime)\nPython platform: macOS-15.1.1-arm64-arm-64bit\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nApple M1 Pro\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.0\n[pip3] torch==2.4.1\n[conda] numpy                     2.1.3                    pypi_0    pypi",
  "transformers_version": "4.44.2",
  "upper_git_hash": null,
  "task_hashes": {
    "kobest_copa": "7a0678a6a5781338ca06aa3bb1d28f3a37a01f404357cc8112052cd8c47426ec",
    "kobest_sentineg": "0ed391121a02bce527dcfaeb08a490facc7bd98d0fa7f36e5bdb2e0eb9ce2ced",
    "kobest_boolq": "62c6899c1659c676c678bd83ba26675dee12c7e8c793c4f1046ff5ff370034c2",
    "kobest_wic": "d7b8eef9d4e7933bc834aa94746e2d252627189bcc4ce212591a402c73f45b55",
    "kobest_hellaswag": "14b3b64ad8ef1c83ac5d838924d1a33093195d1dba24df2120d85350500479a9"
  },
  "model_source": "openai-chat-completions",
  "model_name": "gpt-4o",
  "model_name_sanitized": "gpt-4o",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 21106.957996416,
  "end_time": 25304.950591291,
  "total_evaluation_time_seconds": "4197.992594874999"
}